{
    "contents" : "##Authors:\n#   Alex Ishkin [aleksandr.ishkin@thomsonreuters.com]\n#   Dexter Pratt [depratt@ucsd.edu]\n## Created: 1 June 2014\n## Base functions to perform HTTP transactions to an NDEX server via the NDEx REST API\n## Updated to NDEX v1.0 API 1 November 2014\n\n##Initialize internal environment to store package-specific stuff, of no value to user\nNDEx.env <- new.env(hash=T)\n##Set default REST server\nassign('host', 'http://www.ndexbio.org/rest', envir=NDEx.env)\n\n#' Connect to NDEx REST API\n#' \n#' @param username character username\n#' @param password character password\n#' @param host (optional) URL of NDEx REST server to be used\n#' @return returns nothing; RCurl options object for authentication is stored in the special environment and reused with the queries\n#' @note REST server location can also be set separately using \\code{\\link{ndex.get.host}}. In this case, supplying host here is not necessary\n#' @seealso \\code{\\link{ndex.get.host}}\n#' @export\nndex.connect <- function(username, password, host){\n  credentials = TRUE\n  if(missing(username) || missing(password)){\n    cat(\"\\nndex.connect: Connecting anonymously - username or password not supplied\")\n    credentials = FALSE\n  } \n  if(missing(host)){\n    ##Use host URL stored in internal environment (it may be default)\n    cat(\"ndex.connect: host not specified, using default\")\n    host <- ndex.get.host()\n  } else{\n    ##Use supplied host and store it in internal env\n    cat(\"\\nndex.connect: host = \", host)\n    ndex.set.host(host)\n  }\n  \n  ##Attempt authentication if we have credentials\n  if (credentials){\n    try(auth_response <- getURL(paste0(host, \"/user/authenticate/\", username, \"/\", password)))\n    if(isValidJSON(auth_response, asText=T)){\n      auth_response <- fromJSON(auth_response)\n      ##Authentication successful (JSON with user data was returned)\n      ndex.opts <- curlOptions(userpwd=paste0(username, \":\", password), httpauth = 1L)\n      ##Store RCurl options in the internal environment; reuse for other REST queries which require authentication\n      assign('ndex.opts', value=ndex.opts, envir=NDEx.env)\n      assign('current.user', value=auth_response$id, envir=NDEx.env)\n      \n      cat(host, \" responding as NDEx REST server \", \"\\nAuthentication of, \", auth_response$username, \"is successful!\\n\",  sep='')\n    } else{\n      stop(paste(\"ndex.connect with credentials. response = \", auth_response))\n    }\n  } else {\n    ##Check response of standard admin query\n    try(auth_response <- getURL(paste0(host, \"admin\")))\n    if(isValidJSON(auth_response, asText=T)){\n      cat(host, \" responding as NDEx REST server\",  sep='')\n    }else{\n      stop(paste(\"ndex.connect:\", auth_response))\n    }       \n  }\n  invisible(TRUE)\n}\n\n#' Check if user is authenticated to NDEx REST server\n#' @return logical (TRUE if user is authenticated and connection is active, FALSE otherwise)\n#' @export\nndex.alive <- function(){\n  if(!exists('NDEx.env')) return(FALSE) ##this shouldn't happen\n  if(!exists('current.user', envir = NDEx.env)) return(FALSE)\n  if(!exists('ndex.opts', envir=NDEx.env)) {\n    return(FALSE)\n  }else{\n    ##Try getting something from API again\n    test <- NULL\n    try(test <- getURL(paste0(ndex.get.host(), \"/users/\", NDEx.env$current.user), .opts=NDEx.env$ndex.opts))\n    if(is.null(test)){\n      return(FALSE)\n    }else{\n      if(isValidJSON(test, asText=T)) return(TRUE)\n      else return (FALSE)\n    }\n  }\n}\n\n\n#################################################\n##Low-level REST-querying functions\n\n#' Generic GET query to API\n#' \n#' @param route Character (route to specific REST query)\n#' @return JSON response from REST server (it will be handled downstream)\n#' @details Simply execute HTTP GET on URL host/route and fetch whatever data REST server returns \n#' Making sure the route is well-formed is the job of calling function\n#' @seealso \\code{\\link{_ndex_rest_PUT}},  \\code{\\link{_ndex_rest_POST}},  \\code{\\link{_ndex_rest_DELETE}}\n#' @examples\n#' \\dontrun{ndex_rest_GET(\"/networks/api\")}\nndex_rest_GET <- function(route){\n  url <- paste0(ndex.get.host(), route)\n  if(NDEx.env$ndex.opts){\n    #if(!ndex.alive()) stop(\"Authentication required!\")\n    auth.opts <- NDEx.env$ndex.opts\n  } else{\n    auth.opts <- curlOptions(httpauth = 1L)\n  }\n  content <- getURL(url, .opts=auth.opts)\n  return(content)\n}\n\n#' Generic PUT query to API\n#' \n#' @param route Character (route to specific REST query)\n#' @param data Whatever data to be supplied with query. Should be valid JSON\n#' @param auth Logical: is authentication required?\n#' @return JSON response from REST server (it will be handled downstream)\n#' @details Simply execute HTTP PUT on URL host/route and fetch whatever data REST server returns \n#' Making sure the route is well-formed is the job of calling function\n#' Making sure the data is well-formed is also the job of calling function\n#' @seealso \\code{\\link{_ndex_rest_GET}},  \\code{\\link{_ndex_rest_POST}},  \\code{\\link{_ndex_rest_DELETE}}\n#' @examples\n#' ##TBD\nndex_rest_PUT <- function(route, data){\n  if(!isValidJSON(data, asText = TRUE)) stop(sprintf(\"Malformed JSON input for POST query: %s\", data))\n  url <- paste0(ndex.get.host(), route)\n  if(NDEx.env$ndex.opts){\n    #if(!ndex.alive()) stop(\"Authentication required!\")\n    auth.opts <- NDEx.env$ndex.opts\n  } else{\n    auth.opts <- curlOptions(httpauth = 1L)\n  }\n  \n  rdata <- charToRaw(data)\n  \n  h = basicTextGatherer()\n  h$reset()\n  curlPerform(url = url,\n              httpheader=c('Content-Type' = \"application/json\"),\n              customrequest = \"PUT\",\n              readfunction=rdata,\n              infilesize = length(rdata), upload=TRUE,\n              writefunction = h$update,\n              .opts = auth.opts, verbose=TRUE)\n  \n  content = h$value()\n  \n  #content <- httpPUT(url, content=data , .opts=auth.opts)\n  return(content)\n}\n\n\n#' Generic POST query to API\n#' \n#' @param route Character (route to specific REST query)\n#' @param data Whatever data to be supplied with query. Should be valid JSON\n#' @return JSON response from REST server (it will be handled downstream)\n#' @details Simply execute HTTP PUT on URL host/route and fetch whatever data REST server returns \n#' Making sure the route is well-formed is the job of calling function\n#' Making sure the data is well-formed is also the job of calling function\n#' @seealso \\code{\\link{_ndex_rest_GET}},  \\code{\\link{_ndex_rest_PUT}},  \\code{\\link{_ndex_rest_DELETE}}\n#' @examples\n#' ##TBD\nndex_rest_POST <- function(route, data){\n  if(!isValidJSON(data, asText = TRUE)) stop(sprintf(\"Malformed JSON input for POST query: %s\", data))\n  url <- paste0(ndex.get.host(), route)\n  if(NDEx.env$ndex.opts){\n    ##if(!ndex.alive()) stop(\"Authentication required!\")\n    auth.opts <- NDEx.env$ndex.opts\n  } else{\n    auth.opts <- curlOptions(httpauth = 1L)\n  }\n  \n  h = basicTextGatherer()\n  h$reset()\n  curlPerform(url = url,\n              postfields = data,\n              httpheader = c('Content-Type' = \"application/json\"),\n              writefunction = h$update,\n              .opts=auth.opts)\n  \n  content = h$value()\n  return(content)\n}\n\n#################################################\n##Get/set the REST server URL\n\n#' Set NDEx REST server URL\n#' \n#' @param host String with URL to NDEx REST server (currently, default will be \\link{http://dev.ndexbio.org:8080/ndexbio-rest})\n#' @return returns TRUE invisibly\n#' @seealso \\code{\\link{ndex.get.host}}\n#' @export\nndex.set.host <- function(host){\n  if(missing(host)) {\n    host <- ndex.get.host()\n    warning(sprintf(\"Host URL not supplied. Default host will be set: %s\"), host)\n  }\n  if(!is.character(host)) stop(\"ndex.set.host: string expected as an input\")\n  ##Clean up a little (to avoid malformed queries)\n  if(grepl(\"/$\", host)) host <- sub(\"/$\", \"\", host)\n  adminURL <- paste0(host, \"/admin/status\") \n  cat(\"\\ntest url = \", adminURL)\n  exists <- url.exists(adminURL)\n  cat(\"\\nexists = \", exists, \" host = \", host)\n  ##Check if host is alive\n  if(!exists) stop(sprintf(\"Host %s does not exist\", host))\n  \n  assign('host', host, envir=NDEx.env)\n  invisible(TRUE)\n}\n\n#' Get NDEx REST server URL\n#' \n#' @return REST server URL as a string\n#' @seealso \\code{\\link{ndex.set.host}}\n#' @export\nndex.get.host <- function(){\n  return(get('host', envir=NDEx.env))\n}\n\n\n",
    "created" : 1413676209520.000,
    "dirty" : false,
    "encoding" : "ISO8859-1",
    "folds" : "",
    "hash" : "2250820573",
    "id" : "4674AA8",
    "lastKnownWriteTime" : 1414643852,
    "path" : "~/Projects/ndex-r-client/R/ndex_connect.r",
    "project_path" : "R/ndex_connect.r",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}